version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: webcv_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webcv_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-3002}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Cloudinary configuration
      CLOUDINARY_NAME: ${CLOUDINARY_NAME}
      CLOUDINARY_KEY: ${CLOUDINARY_KEY}
      CLOUDINARY_SECRET: ${CLOUDINARY_SECRET}
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./public/uploads:/app/public/uploads
      - strapi_data:/app/.tmp

volumes:
  postgres_data:
  strapi_data:
